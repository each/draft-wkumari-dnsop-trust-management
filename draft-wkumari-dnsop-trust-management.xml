<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" ".//reference.RFC.2119.xml">
]>
<!-- WK: Set category, IPR, docName -->
<!-- WK: Testing edit in github itself... -->
<rfc category="info" docName="draft-wkumari-dnsop-trust-management-01"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc iprnotified="no" ?>

  <?rfc strict="yes"?>

  <?rfc compact="yes" ?>

  <front>
    <!-- WK: Set long title. -->

    <title abbrev="draft-wkumari-dnsop-trust-management">Signalling of DNS
    Security (DNSSEC) Trust Anchors</title>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>

      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>

          <city>Mountain View, CA</city>

          <code>94043</code>

          <country>US</country>
        </postal>

        <email>warren@kumari.net</email>
      </address>
    </author>

    <author fullname="Geoff Huston" initials="G." surname="Huston">
      <organization>APNIC</organization>

      <address>
        <postal>
          <street>6 Cordelia St</street>

          <city>South Brisbane QLD</city>

          <code>4001</code>

          <country>AUS</country>
        </postal>

        <email>gih@apnic.net</email>
      </address>
    </author>

    <date day="25" month="September" year="2015"/>

    <area>template</area>

    <workgroup>template</workgroup>

    <abstract>
      <t>[ Editor note: This originally included a mechanism to actually roll
      the keys (like RFC5011 does), but feedback from the Prague meeting
      indicated a strong preference for signalling only. ]</t>

      <t>This document describes a simple method for validating recursive
      resolvers to signal their configured list of DNSSEC trust anchors. This
      mechanism allows the trust anchor maintainer to monitor the progress of
      the migration to a new trust anchor, and so predict the effect before
      decommissioning the existing trust anchor.</t>

      <t>It is primarily aimed at the root DNSSEC trust anchor, but should be
      applicable to trust anchors elsewhere in the DNS as well.</t>

      <t>[ Ed note - informal summary: One of the big issues with rolling the
      root key is that it is unclear who all is using RFC5011, who all has
      successfully fetched and installed the new key, and, most importantly,
      who all will die when the old key is revoked. By having resolvers query
      for a special QNAME, comprised of the list of TAs that it knows about,
      we effectively signal "up stream" to the authoritative server. By
      querying for this name, the recursive exposes its list of TAs to this
      authoritative server. This allows the TA maintainer to gather
      information relating to the state of TAs on resolvers.]</t>

      <t>[ Ed note: Text inside square brackets ([]) is additional background
      information, answers to frequently asked questions, general musings,
      etc. They will be removed before publication.]</t>

      <t>[ This document is being collaborated on in Github at:
      https://github.com/wkumari/draft-wkumari-dnsop-trust-management. The
      most recent version of the document, open issues, etc should all be
      available here. The authors (gratefully) accept pull requests ]</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>When a DNSSEC aware resolver performs validation, it requires a trust
      anchor to validate the DNSSEC chain. An example of a trust anchor is the
      so called DNSSEC "root key". For a variety of reasons this trust anchor
      may need to be replaced or "rolled", to a new key (potentially with a
      different algorithm, different key length, etc.).</t>

      <t><xref target="RFC5011"/> provides a secure mechanism to do this, but
      operational experience has demonstrated a need for some additional
      functionality that was not foreseen.</t>

      <t>During the current efforts to roll the IANA DNSSEC "root key", it has
      become clear that, in order to predict (and minimize) outages caused by
      rolling the key, one needs to know who does not have the new key.</t>

      <t>This document defines a new record type, Trust Digest Signal (TDS),
      which a machanism for validating resolvers to signal their configured
      trust anchors, and some practices for using it. Readers of this document
      are expected to be familiar with the contents of <xref
      target="RFC7344"/> and <xref target="RFC5011"/>.</t>

      <section title="Requirements notation">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>
      </section>
    </section>

    <section title="TDS Record Format">
      <t>The TDS record does not really have a format, as it does not really
      exist. Instead it is simply a type that can be queried for, the response
      is meaningless.</t>

      <t>IANA has allocated RR code TBD for the TDS resource record via Expert
      Review [DNS-TRANSPORT]. No special processing is performed by
      authoritative servers or by resolvers, when serving or resolving.</t>

      <section title="TDS Owner Name">
        <t>The purpose of the mechanism described in this document is to allow
        the trust anchor maintainer to determine how widely deployed a given
        trust anchor is, and who is using an outdated trust anchor. This
        information is signalled from the validating resolver to the
        authoritative servers serving the zone in which the Trust Anchor
        lives.</t>

        <t>This information is available from looking at queries to DNS
        servers serving the DNSKEY record for the zone; each validating
        resolver using this mechanism will periodically query the zone for a
        name encoding the list of trust anchors it is using for that zone.</t>

        <t>The owner name is computed as follows:<list style="numbers">
            <t hangText="Step 1">Take the Key Tags of all of the DS records
            corresponding to the TA(s) that the resolver knows / is using.</t>

            <t hangText="Step 1">Sort this list in numerically ascending
            order</t>

            <t>Prepend an underscore ('_') to each Key Tag</t>

            <t>Concatenate the list, with each key tag being a label.</t>

            <t>Append _tds.&lt;domain&gt;</t>
          </list>As an example, if the resolver has a single Trust Anchor
        configured for the root with a Key Tag of 4217, it would emit a query
        for _4217._tds. If it has two Trust Anchors, with Key Tags 1985 and
        1776 it would generate an owner name of _1776._1985._tds. If there is
        a separate Trust Anchor configured for example.com with a key ID of
        1234, the resolver would query for _1234._tds.example.com.</t>

        <t>NOTE: The generation of the TDS Name means that Key Tags MUST be
        unique, at least within "recent" history. If (e.g during a Key
        Ceremony) a new DNSKEY is generated whose derived Key Tag collides
        with an exiting one (statistically unlikely, but not impossible) this
        DNSKEY MUST NOT be used, and a new DNSKEY MUST be generated. [ Ed
        note: This is to prevent two successive keys having the same keytag
        (e.g: 123), and then seeing "_123." - which 123 key was that?! RFC4034
        Appendix B admonition: "Implementations MUST NOT assume that the key
        tag uniquely identifies a DNSKEY RR", but this appears to be targeted
        ad validating resolver implmentations.]</t>
      </section>
    </section>

    <section title="TDS Record Processing">
      <t>When a compliant recursive resolver performs the "Active Refresh"
      query at port of its RFC5011 (<xref target="RFC5011"/> Section 2.3))
      processing it will also send a TDS query for the TDS Owner Name. This
      SHOULD be hte default for complaint resolvers.</t>

      <t>It will receive back either an error (e.g NoError / NoData), or a
      (nonsencial) answer. The entire purpose of this query is to signal the
      list of trust anchors that the recursive reolver knows about to the
      nameservers that serve the zone containing the TA. This means that the
      response to the query contains no useful information and MUST be
      ignored.</t>
    </section>

    <section title="Known issues and limitations">
      <t>This solution only provides visibility from compliant resolvers, no
      information is provided from legacy resolvers, or from those who choose
      to disable this functionality.</t>

      <t>In addition, the TA operator has no way to disambiguate a query that
      is emmitted by the resolver itself, versus a query that is forwarded
      through the resolver. An attacker could also spoof quries of this form
      to trick the TA operator.</t>

      <t>This solution is designed to provide a rough idea of who will not
      break during a key rollover, not perfect visibility.</t>

      <t>[ Open Questions:</t>

      <t>1: In order to disambiguate queries from resolvers versus those
      forwarded through resolvers (or being recursed because of users behind
      the resolver) we *could* add craziness like having resolvers include
      ephemeral UUIDs or something...). Is this worth doing? (Personally I
      think not...)</t>

      <t>2: We *could* also specify that compliant resolvers MUST NOT forward
      queries of type TDS to try limit this. Worth doing? This is some of the
      reason for having a defined type.</t>

      <t>3: The authorative server *could* return a record with a long TTL to
      stop queries (if it knows that it is not doing a rollover in the near
      future). This seems like a simple option, worth doing? (I think so).
      ]</t>
    </section>

    <section title="IANA Considerations">
      <t>[ Ed note: This is largely a place holder. The real IANA
      considerations section will require updating things like the DPS, etc.
      ]</t>

      <t>The generation of the TDS Name means that Key Tags MUST be unique, at
      least within an interval. If, during a Key Ceremony, a new DNSKEY is
      generated whose derived Key Tag collides with an exiting one
      (statistically unlikely, but not impossible) this DNSKEY MUST NOT be
      used, and a new DNSKEY MUST be generated.</t>

      <t>There will need to be some text added to the DNSSEC Ceremony to
      handle this.</t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>[ Ed note: a placeholder as well ]</t>

      <t>This mechanism causes a recursove resolver to disclose the list of
      Trust Anchors that it knows about to the authorative servers serving the
      zone containing the TA (or attackers able to monitor the path between
      these devices). It is conceviable that an attacker may be able to use
      this to determine that a resolver trusts an outdated / revoked trust
      anchor and perform a MitM attack This would also require the attacker to
      have factored the private key. This seems farfetched....</t>
    </section>

    <section title="Contributors">
      <t>A number of people contributed significantly to this document,
      including Joe Abley, Paul Wouters, Paul Hoffman. Wes Hardaker and David
      Conrad.</t>
    </section>

    <section title="Acknowledgements">
      <t/>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.4034'?>

      <?rfc include='reference.RFC.5011'?>

      <?rfc include='reference.RFC.7344'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.draft-ietf-sidr-iana-objects-03.xml'?>
    </references>

    <section title="Changes / Author Notes.">
      <t>[RFC Editor: Please remove this section before publication ]</t>

      <t>From -00 to -01.1:<list style="symbols">
          <t>Ripped all the actual keyroll logic out.</t>

          <t>Added Geoff as author.</t>

          <t>Added some limitations and known issues.</t>
        </list></t>

      <t>From -00.1 to -00 (published):<list style="symbols">
          <t>Integrated comments and feedback from DRC and Paul Hoffman.</t>

          <t>Use _ as a prefix to make clear it is meta-type (drc)</t>
        </list></t>

      <t>From -00.0 to -00.1</t>

      <t><list style="symbols">
          <t>Initial draft, written in an airport lounge.</t>
        </list></t>
    </section>
  </back>
</rfc>
